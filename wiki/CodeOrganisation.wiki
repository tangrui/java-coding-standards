#summary summary of coding standards to do with organinsing your source code
#sidebar TableOfContents

= Code Organisation =

The following conventions are around how we organise both test and production source code.

== Guiding Principles ==

When considering how to organise our code we take into account the following principles outlined in http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf.

   * The Release Reuse Equivalency Principle (REP): The granule of reuse is the granule of release.
   * The Common Closure Principle (CCP): Classes that change together, belong together.
   * The Common Reuse Principle (CRP):  Classes that arenâ€™t reused together should not be grouped together.

== Modules ==

=== Module Organisation ===

A module is responsible for creating the software deliverable (code and documentation).

Thus the implementation of a piece of software may choose to organise its code underneath a single module or within multiple modules.

=== Module Naming ===

The name of a module should describe its purpose. A Single module approach may choose to name the module after the application or the piece of software being created. Multi module approaches may opt to name modules after the sub-system of the application/software that they represent.

We name our modules using camel case with the first letter of the module as a capital.

e.g. !ExampleModuleName, !ExampleWebAppWar, !ExampleWebAppEar

=== Module Structure ===

We adopt the following module struture for organising where our source files go:

{{{
+[ProjectName]
|
----+ src
     |
     ----+ main 
     |   |
     |   ----+ java 
     |
     |----+ test
         |
         ----+ java
----+ lib
----+ target
     |
     + classes/main/java
     + classes/test/java
     |
     + reports
}}}

== Packages ==